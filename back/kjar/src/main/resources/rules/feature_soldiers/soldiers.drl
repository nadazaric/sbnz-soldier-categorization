// package feature_soldiers;

import com.ftn.sbnz.model.feature_soldiers.models.Soldier;
import com.ftn.sbnz.model.feature_soldiers.models.WarDuty;
import com.ftn.sbnz.model.feature_soldiers.values.WarDutyType;
import com.ftn.sbnz.model.feature_soldiers.values.SoldierCategory;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import com.ftn.sbnz.model.feature_soldiers.values.SoldierStatus;
import com.ftn.sbnz.model.feature_soldiers.models.Injury;
import com.ftn.sbnz.model.feature_soldiers.values.InjuryType;

rule "Calculate months for categorization"
    agenda-group "categorization"
    when 
        $soldier: Soldier($soldierId: id, SoldierStatus.NO_MONTHS == status)
        $totalDays: Number() from accumulate(
            WarDuty(
                soldier.id == $soldierId, 
                type == WarDutyType.WAR_ZONE, 
                $startDate: startDate, 
                $endDate: endDate
            ),
            sum((int)(ChronoUnit.DAYS.between($startDate, $endDate) + 1))
        )
    then 
        modify($soldier) {setMonths((int) $totalDays/30);}
        modify($soldier) {setStatus(SoldierStatus.UNCATEGORIZED);}
end

rule "Calculate bonus from Injuries"
    no-loop true
    agenda-group "categorization"
    when
        $soldier: Soldier(
            $soldierId: id, 
            $monthlyContribution: monthlyContribution, 
            SoldierStatus.NO_INJURIES == status
        )
        $bonus: Number() from accumulate(
            Injury(soldier.id == $soldierId, $type: type),
            sum(
                $type == InjuryType.LOW ? 20 :
                $type == InjuryType.MEDIUM ? 30 :
                $type == InjuryType.HIGH ? 40 :
                0
            )
        )
    then
        modify($soldier) {setMonthlyContribution($monthlyContribution + $bonus.doubleValue());}
end