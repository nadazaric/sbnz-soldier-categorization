// package backward;

import com.ftn.sbnz.model.feature_competitions.models.Competitor;
import com.ftn.sbnz.model.feature_competitions.values.CompetitorStatus;
import com.ftn.sbnz.model.feature_competitions.models.SpaCompetition;
import com.ftn.sbnz.model.feature_competitions.values.FamilyType;
import com.ftn.sbnz.model.feature_soldiers.values.InjuryType;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.util.Comparator;
import java.util.Set;
import java.util.LinkedHashSet;

rule "Check and Collect Recent Competitors"
when
    $newCompetitor: Competitor(status == CompetitorStatus.WAITING)
    $competitions: List() from collect(
        SpaCompetition(year >= String.valueOf(LocalDate.now().minusYears(3).getYear()) && isDone == true)
    )
then
    List<String> recentCompetitorsJmbg = new ArrayList<>();

    for (Object obj : $competitions) {
        SpaCompetition competition = (SpaCompetition) obj;
        for (Competitor competitor : competition.getSelectedCompetitors()) {
            if (!recentCompetitorsJmbg.contains(competitor.getJmbg())) {
                recentCompetitorsJmbg.add(competitor.getJmbg());
            }
        }
    }

    CompetitorStatus status = CompetitorStatus.ACCEPTED;
    if (recentCompetitorsJmbg.contains($newCompetitor.getJmbg())) {
        System.err.println("Competitor with JMBG " + $newCompetitor.getJmbg() + " already exists in recent SpaCompetitions.");
        status = CompetitorStatus.DENIED;
    }
    modify($newCompetitor) {setStatus(status);}
end

rule "Check Competitor score"
when 
    $competitor: Competitor(status == CompetitorStatus.ACCEPTED, score == 0)
then
    Integer score = 1;

    if ($competitor.getDeadFamilyMember() == FamilyType.CHILD) score += 15;
    else if ($competitor.getDeadFamilyMember() == FamilyType.SPOUSE) score += 5;

    if ($competitor.getInjuryType() == InjuryType.LOW) score += 5;
    else if ($competitor.getInjuryType() == InjuryType.MEDIUM) score += 15;
    else if ($competitor.getInjuryType() == InjuryType.HIGH) score += 30;
    
    modify($competitor) {setScore(score);}
end

rule "Select Competitors for SpaCompetition"
when
    $competition: SpaCompetition(isDone == true, selectedCompetitors.size() == 0)
then
    List<Competitor> competitors = new ArrayList<Competitor>($competition.getCompetitors());
    Collections.sort(competitors, new Comparator<Competitor>() {
        public int compare(Competitor c1, Competitor c2) {
            return c2.getScore().compareTo(c1.getScore());
        }
    });

    Integer numberOfPosition = $competition.getPositionNumber();
    if (numberOfPosition > $competition.getCompetitors().size()) numberOfPosition = $competition.getCompetitors().size();

    Set<Competitor> selectedCompetitors = new LinkedHashSet<>();
    for (int i = 0; i < numberOfPosition; i++) {
        Competitor competitor = competitors.get(i);
        if (competitor.getStatus() != CompetitorStatus.DENIED) selectedCompetitors.add(competitor);
    }
    
    modify($competition) {setSelectedCompetitors(selectedCompetitors);}
end